# BASE.md 품질 보증 시스템: 7.5/10 이상 필수
name: Quality Assurance Check

on:
  pull_request:
    paths:
      - "src/content/chapters/**/*.md"
      - "src/content/novels/**/*.md"
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      force_check:
        description: 'Force quality check even without file changes'
        required: false
        default: false
        type: boolean
  schedule:
    - cron: '30 2 * * *'  # 매일 새벽 2:30 (자동화 이후 품질 검사)

jobs:
  quality-check:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: 🔧 Node.js + pnpm 환경 설정
        uses: ./.github/actions/setup-node-pnpm
        with:
          install-deps: 'false'
          anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Validate API Key
        run: |
          if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "❌ ANTHROPIC_API_KEY 시크릿이 설정되지 않았습니다."
            echo "GitHub Repository Settings > Secrets에서 ANTHROPIC_API_KEY를 설정해주세요."
            exit 1
          else
            echo "✅ API 키 확인됨"
          fi

      - name: Check Content Files
        id: check_files
        run: |
          # 검토할 파일이 있는지 확인
          if [ -d "src/content/chapters" ] && [ -d "src/content/novels" ]; then
            chapter_count=$(find src/content/chapters -name "*.md" | wc -l)
            novel_count=$(find src/content/novels -name "*.md" | wc -l)
            echo "✅ 컨텐츠 폴더 확인됨 - 소설: ${novel_count}편, 챕터: ${chapter_count}화"
            echo "has_content=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ 컨텐츠 폴더가 존재하지 않습니다."
            echo "has_content=false" >> $GITHUB_OUTPUT
          fi

      - name: AI Quality Review with Claude Code
        id: claude_review
        if: steps.check_files.outputs.has_content == 'true'
        continue-on-error: true
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          direct_prompt: |
            # 로맨스 판타지 품질 검증 시스템

            ## 목표: 새로 생성된 챕터들의 품질을 로판 독자 기준으로 검증

            ## 1단계: 변경된 파일 확인
            - 최근 커밋에서 수정/추가된 .md 파일들 식별
            - src/content/chapters/ 내의 새 챕터 파일들 우선 검토

            ## 2단계: 로맨스 판타지 품질 평가 (각 항목 0-10점)

            ### 평가 기준:
            1. **마크다운 포맷 준수** (0-10점) ⭐ **필수**
               - 대화체: `> "내용"` 형식 준수 여부
               - 독백: `> *'내용'*` 형식 준수 여부  
               - 액션: `> [행동설명]` 형식 준수 여부
               - 서술: 중요 키워드 **볼드** 처리 여부
               - 한 줄에 하나 요소만 포함 원칙 준수
               - 따옴표 규칙 (대화=", 독백=') 준수

            2. **로맨스 몰입도** (0-10점)
               - 주인공들 간의 감정적 긴장감
               - 로맨틱한 상황과 대화의 자연스러움
               - 독자의 설렘 유발 정도

            3. **판타지 세계관 일관성** (0-10점)
               - 마법/판타지 설정의 논리성
               - 이전 챕터와의 설정 연속성
               - 세계관 내 규칙 준수

            4. **캐릭터 매력도** (0-10점)
               - 주인공/조연의 개성과 매력
               - 캐릭터 행동의 일관성
               - 대화와 행동의 개연성

            5. **문장 가독성** (0-10점)
               - 문법과 맞춤법 정확성
               - 문장의 자연스러움과 유려함
               - 적절한 문체와 어조

            6. **다음화 기대감** (0-10점)
               - 클리프행어의 효과성
               - 스토리 진행의 흥미로움
               - 독자의 궁금증 유발

            ## 3단계: 점수 계산 및 판정
            - 총점 = (각 항목 점수 합계) / 6
            - **합격 기준: 7.5/10 이상**
            - **마크다운 포맷 준수는 8.0/10 이상 필수** (포맷 불일치 시 자동 재작성)
            - 불합격 시 구체적인 개선 사항 제시

            ## 4단계: 결과 처리
            ### 합격 (7.5점 이상):
            - ✅ 품질 검증 통과 코멘트 추가
            - 정식 배포 승인

            ### 불합격 (7.5점 미만):
            - ❌ 품질 개선 필요 이슈 생성
            - 구체적인 문제점과 개선 방향 제시
            - 재생성 요청 플래그 설정

            ## 5단계: 자동 개선 (선택사항)
            7.0점 이상 7.5점 미만인 경우:
            - 지적된 문제점을 자동으로 수정 시도
            - 수정된 버전으로 파일 업데이트

            ## 실행 명령
            위 기준으로 최근 추가/수정된 로맨스 판타지 챕터들을 지금 검증하세요.
            각 챕터별로 상세한 점수와 평가 이유를 제공하고, 필요시 개선 사항을 구체적으로 제안하세요.

      - name: 🔧 Node.js 환경 설정 (폴백용)
        if: steps.claude_review.outcome == 'failure'
        uses: ./.github/actions/setup-node-pnpm
        with:
          install-deps: 'false'

      - name: Alternative AI Quality Check
        id: alternative_check
        if: steps.claude_review.outcome == 'failure'
        continue-on-error: true
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "🔄 Claude Code Action 실패 - 대안 API 호출 시도"
          
          # 최신 챕터 파일 찾기
          latest_chapter=$(find src/content/chapters -name "*.md" -type f -exec ls -t {} + | head -1)
          
          if [[ -n "$latest_chapter" && -f "$latest_chapter" ]]; then
            echo "📖 검토할 파일: $latest_chapter"
            
            # 파일 내용 읽기
            content=$(cat "$latest_chapter")
            char_count=$(echo "$content" | wc -m | tr -d ' ')
            
            echo "📊 파일 정보:"
            echo "  - 글자 수: $char_count"
            echo "  - 파일 크기: $(du -h "$latest_chapter" | cut -f1)"
            
            # 기본 품질 점수 계산
            score=0
            
            # 메타데이터 체크 (2점)
            if echo "$content" | head -10 | grep -q "^title:"; then
              score=$((score + 2))
              echo "✅ 메타데이터 존재: +2점"
            else
              echo "❌ 메타데이터 누락: +0점"
            fi
            
            # 글자 수 체크 (2점)
            if [[ $char_count -ge 3000 ]]; then
              score=$((score + 2))
              echo "✅ 적절한 분량 ($char_count >= 3000): +2점"
            else
              echo "❌ 분량 부족 ($char_count < 3000): +0점"
            fi
            
            # 마크다운 형식 체크 (3점)
            dialogue_count=$(grep -c '^> "' "$latest_chapter" || echo 0)
            action_count=$(grep -c '^> \[' "$latest_chapter" || echo 0)
            monologue_count=$(grep -c "^> _'" "$latest_chapter" || echo 0)
            
            if [[ $dialogue_count -gt 0 && $action_count -gt 0 ]]; then
              score=$((score + 3))
              echo "✅ 마크다운 형식 준수 (대화:$dialogue_count, 액션:$action_count, 독백:$monologue_count): +3점"
            else
              score=$((score + 1))
              echo "⚠️ 마크다운 형식 부분 준수: +1점"
            fi
            
            # 구조화 체크 (1점)
            if grep -q "^##" "$latest_chapter"; then
              score=$((score + 1))
              echo "✅ 장면 구분 존재: +1점"
            else
              echo "❌ 장면 구분 없음: +0점"
            fi
            
            # 한글 컨텐츠 체크 (2점)
            korean_chars=$(echo "$content" | grep -o '[가-힣]' | wc -l | tr -d ' ')
            if [[ $korean_chars -gt 1000 ]]; then
              score=$((score + 2))
              echo "✅ 한글 콘텐츠 충분 ($korean_chars chars): +2점"
            else
              echo "⚠️ 한글 콘텐츠 부족 ($korean_chars chars): +1점"
              score=$((score + 1))
            fi
            
            # bc가 없을 수 있으므로 bash 산술 사용
            total_score=$(awk "BEGIN {printf \"%.1f\", $score}")
            echo "📊 최종 점수: $total_score/10"
            
            # 7.5 이상인지 체크 (75 이상으로 정수 비교)
            score_int=$(awk "BEGIN {printf \"%.0f\", $score * 10}")
            if [[ $score_int -ge 75 ]]; then
              echo "✅ 품질 검증 통과"
              echo "quality_passed=true" >> $GITHUB_OUTPUT
            else
              echo "❌ 품질 기준 미달 ($total_score < 7.5)"
              echo "quality_passed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ 검토할 챕터 파일이 없습니다."
            echo "quality_passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Basic Fallback Quality Check
        if: steps.claude_review.outcome == 'failure' && steps.alternative_check.outcome == 'failure'
        run: |
          echo "🔄 모든 AI 검증 실패 - 기본 품질 검사 실행"
          
          # 기본적인 마크다운 형식 검사
          echo "📝 기본 마크다운 형식 검사..."
          
          failed_files=()
          for file in src/content/chapters/*.md; do
            if [[ -f "$file" ]]; then
              echo "검사 중: $file"
              
              # 기본 메타데이터 확인
              if ! head -10 "$file" | grep -q "^title:"; then
                echo "❌ $file: 제목 메타데이터 누락"
                failed_files+=("$file")
              fi
              
              # 최소 글자 수 확인 (3000자 이상)
              char_count=$(wc -m < "$file" | tr -d ' ')
              if [[ $char_count -lt 3000 ]]; then
                echo "❌ $file: 글자 수 부족 ($char_count < 3000)"
                failed_files+=("$file")
              else
                echo "✅ $file: 글자 수 적절 ($char_count)"
              fi
            fi
          done
          
          if [[ ${#failed_files[@]} -eq 0 ]]; then
            echo "✅ 기본 품질 검사 통과"
          else
            echo "❌ 품질 검사 실패한 파일들: ${failed_files[*]}"
            exit 1
          fi

      - name: Action Status Summary
        if: always()
        run: |
          echo "📊 품질 검증 결과 요약"
          echo "========================"
          
          # 각 단계별 결과 확인
          if [[ "${{ steps.check_files.outputs.has_content }}" != "true" ]]; then
            echo "⏭️ 검증할 콘텐츠 없음"
          elif [[ "${{ steps.claude_review.outcome }}" == "success" ]]; then
            echo "✅ Claude Code AI 품질 검증 성공"
          elif [[ "${{ steps.alternative_check.outcome }}" == "success" ]]; then
            if [[ "${{ steps.alternative_check.outputs.quality_passed }}" == "true" ]]; then
              echo "✅ 대안 품질 검증 통과"
            else
              echo "❌ 대안 품질 검증 실패"
            fi
          else
            echo "🔄 기본 폴백 검사 실행됨"
          fi
          
          # 전체 상태 결정
          if [[ "${{ steps.claude_review.outcome }}" == "success" ]] || \
             [[ "${{ steps.alternative_check.outputs.quality_passed }}" == "true" ]]; then
            echo "🎉 전체 품질 검증: ✅ 통과"
            exit 0
          elif [[ "${{ steps.check_files.outputs.has_content }}" != "true" ]]; then
            echo "ℹ️ 전체 품질 검증: 검증 대상 없음"
            exit 0
          else
            echo "❌ 전체 품질 검증: 기준 미달"
            exit 1
          fi

      - name: Quality Report Summary
        run: |
          echo "📊 품질 검증 완료"
          echo "🎯 로맨스 판타지 특화 검증 실시"
          echo "📋 합격 기준: 7.5/10 이상"
          echo "📈 검증 항목: 로맨스몰입도/판타지일관성/캐릭터매력도/문장가독성/기대감"