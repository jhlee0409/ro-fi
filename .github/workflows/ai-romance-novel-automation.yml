name: 🌟 Gemini API 로맨스 판타지 자동 연재 시스템 v2.0

# 완전 새로운 Gemini API 직접 호출 시스템
# 100% Node.js + @google/generative-ai 기반
# GitHub Actions 네이티브 자동화

on:
  # 📅 정기 실행 스케줄 (KST 기준)
  schedule:
    - cron: '0 2 * * *'   # 11:00 KST - 메인 연재 시간
    - cron: '30 6 * * *'  # 15:30 KST - 오후 업데이트
    - cron: '0 12 * * *'  # 21:00 KST - 저녁 연재
  
  # 🎮 수동 실행 (workflow_dispatch)
  workflow_dispatch:
    inputs:
      generation_mode:
        description: '📚 생성 모드 선택'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto          # 자동 우선순위 판단
          - new_novel     # 새 소설 강제 생성
          - continue_chapter # 기존 소설 연재
          - complete_novel   # 소설 완결 처리
      
      creativity_level:
        description: '🎨 창의성 레벨'
        required: false
        default: 'high'
        type: choice
        options:
          - low    # 안정적, 예측 가능한 스타일
          - medium # 균형잡힌 창의성
          - high   # 최대 창의성, 독창적 표현
      
      target_genre:
        description: '📖 타겟 장르 (새 소설 생성시)'
        required: false
        default: '황실로맨스'
        type: choice
        options:
          - 황실로맨스
          - 마법아카데미
          - 기사와귀족
          - 용족황제
          - 마도사학원
          - 엘프왕국
          - 시간여행자
          - 전생귀족영애
          - 마탑의마법사
          - 신전의성녀

      dry_run:
        description: '🔍 테스트 모드 (실제 파일 생성 안함)'
        required: false
        default: false
        type: boolean

# 동시 실행 제한 (안전성 보장)
concurrency:
  group: gemini-api-novel-automation-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # =====================================
  # 메인 작업: Gemini API 자동 연재
  # =====================================
  gemini-api-automation:
    name: 🤖 Gemini API 로맨스 판타지 자동 연재
    runs-on: ubuntu-latest
    
    # 필요한 권한들
    permissions:
      contents: write        # 파일 생성/수정
      pull-requests: write   # PR 생성 (향후 확장)
      issues: write         # 이슈 생성 (에러 리포팅)
      id-token: write       # OIDC 토큰
    
    # 환경변수 설정
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      NODE_ENV: production
      GENERATION_MODE: ${{ github.event.inputs.generation_mode || 'auto' }}
      CREATIVITY_LEVEL: ${{ github.event.inputs.creativity_level || 'high' }}
      TARGET_GENRE: ${{ github.event.inputs.target_genre || '황실로맨스' }}
      DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
      TZ: Asia/Seoul
    
    steps:
      # =====================================
      # 1. 환경 준비
      # =====================================
      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 (분석용)
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📦 Node.js 환경 설정
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: 📦 pnpm 설치
        uses: pnpm/action-setup@v4
        with:
          version: 8
      
      - name: 🔧 의존성 설치
        run: |
          echo "🔧 pnpm으로 패키지 설치 중..."
          pnpm install --frozen-lockfile
          echo "✅ 설치 완료: $(pnpm list --depth=0 | wc -l) 패키지"
      
      # =====================================
      # 2. 환경 검증
      # =====================================
      - name: 🔍 API 키 검증
        run: |
          echo "🔍 환경변수 확인:"
          echo "- NODE_ENV: $NODE_ENV"
          echo "- GEMINI_API_KEY 존재 여부: $([ -n "$GEMINI_API_KEY" ] && echo '✅ 설정됨' || echo '❌ 없음')"
          echo "- GEMINI_API_KEY 길이: ${#GEMINI_API_KEY}"
          
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "❌ GEMINI_API_KEY가 설정되지 않았습니다"
            echo "GitHub Secrets에서 GEMINI_API_KEY를 설정해주세요"
            echo "현재 설정된 환경변수:"
            env | grep -E "(NODE_ENV|GEMINI|API)" || echo "관련 환경변수 없음"
            exit 1
          fi
          echo "✅ Gemini API 키 확인 완료"
      
      - name: 🧪 GitHub 환경 완전성 테스트
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🧪 GitHub Actions 환경에서 Gemini API 연결 테스트 중..."
          node scripts/test-github-environment.js
      
      - name: 📁 디렉토리 구조 확인
        run: |
          echo "📁 프로젝트 구조 확인:"
          echo "- 소설 디렉토리: $([ -d src/content/novels ] && echo '✅' || echo '❌') src/content/novels"
          echo "- 챕터 디렉토리: $([ -d src/content/chapters ] && echo '✅' || echo '❌') src/content/chapters"
          echo "- 스크립트: $([ -f scripts/ai-novel-generator.js ] && echo '✅' || echo '❌') scripts/ai-novel-generator.js"
          
          # 디렉토리 생성 (없는 경우)
          mkdir -p src/content/novels src/content/chapters logs
          echo "✅ 필수 디렉토리 준비 완료"
      
      # =====================================
      # 3. Git 사용자 설정
      # =====================================
      - name: 👤 Git 사용자 설정
        run: |
          git config --global user.name "로판 자동화 봇 🤖"
          git config --global user.email "gemini-automation@github.com"
          git config --global init.defaultBranch main
          echo "✅ Git 설정 완료"
      
      # =====================================
      # 4. 현재 상태 분석 및 로깅
      # =====================================
      - name: 📊 현재 연재 상황 분석
        id: analyze
        run: |
          echo "📊 현재 연재 상황 분석 중..."
          
          NOVEL_COUNT="$(find src/content/novels -name "*.md" 2>/dev/null | wc -l || echo "0")"
          CHAPTER_COUNT="$(find src/content/chapters -name "*.md" 2>/dev/null | wc -l || echo "0")"
          
          echo "현재 상황:"
          echo "- 총 소설 수: $NOVEL_COUNT"
          echo "- 총 챕터 수: $CHAPTER_COUNT"
          
          if [ "$NOVEL_COUNT" -gt 0 ]; then
            echo "📚 기존 소설 목록:"
            find src/content/novels -name "*.md" 2>/dev/null | while read file; do
              echo "  - $(basename "$file" .md)"
            done
          fi
          
          if [ "$CHAPTER_COUNT" -gt 0 ]; then
            echo "📖 최근 챕터 (최대 5개):"
            find src/content/chapters -name "*.md" 2>/dev/null | head -5 | while read file; do
              echo "  - $(basename "$file")"
            done
          fi
          
          # GitHub 출력으로 설정
          echo "novel_count=$NOVEL_COUNT" >> $GITHUB_OUTPUT
          echo "chapter_count=$CHAPTER_COUNT" >> $GITHUB_OUTPUT
          
          echo "✅ 분석 완료"
      
      # =====================================
      # 5. 메인 AI 실행
      # =====================================
      - name: 🤖 Gemini AI 로맨스 판타지 생성 실행
        id: generate
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          NODE_ENV: ${{ env.NODE_ENV }}
        run: |
          echo "🌟 Gemini API 자동 연재 시작"
          echo "설정:"
          echo "  - 모드: $GENERATION_MODE"
          echo "  - 창의성: $CREATIVITY_LEVEL"
          echo "  - 장르: $TARGET_GENRE"
          echo "  - 테스트 모드: $DRY_RUN"
          echo ""
          echo "🔧 환경변수 재확인:"
          echo "  - GEMINI_API_KEY: $([ -n "$GEMINI_API_KEY" ] && echo '✅ 있음' || echo '❌ 없음')"
          echo "  - NODE_ENV: $NODE_ENV"
          echo ""
          
          # 실행 시간 측정
          START_TIME="$(date +%s)"
          
          # Gemini AI 스크립트 실행
          if [ "$DRY_RUN" = "true" ]; then
            echo "🔍 테스트 모드로 실행 중..."
            node scripts/ai-novel-generator.js \
              --mode "$GENERATION_MODE" \
              --creativity "$CREATIVITY_LEVEL" \
              --dry-run \
              --verbose
          else
            echo "🚀 실제 생성 모드로 실행 중..."
            node scripts/ai-novel-generator.js \
              --mode "$GENERATION_MODE" \
              --creativity "$CREATIVITY_LEVEL" \
              --verbose
          fi
          
          EXECUTION_RESULT=$?
          END_TIME="$(date +%s)"
          DURATION=$((END_TIME - START_TIME))
          
          echo ""
          echo "⏱️ 실행 시간: ${DURATION}초"
          
          if [ "$EXECUTION_RESULT" -eq 0 ]; then
            echo "✅ Gemini AI 생성 성공!"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Gemini AI 생성 실패 (종료 코드: $EXECUTION_RESULT)"
            echo "success=false" >> $GITHUB_OUTPUT
            exit "$EXECUTION_RESULT"
          fi
      
      # =====================================
      # 6. 생성 결과 확인
      # =====================================
      - name: 📋 생성 결과 확인
        if: steps.generate.outputs.success == 'true'
        run: |
          echo "📋 생성 후 상태 확인:"
          
          NEW_NOVEL_COUNT="$(find src/content/novels -name "*.md" 2>/dev/null | wc -l || echo "0")"
          NEW_CHAPTER_COUNT="$(find src/content/chapters -name "*.md" 2>/dev/null | wc -l || echo "0")"
          
          echo "업데이트 후:"
          echo "- 총 소설 수: $NEW_NOVEL_COUNT (이전: ${{ steps.analyze.outputs.novel_count }})"
          echo "- 총 챕터 수: $NEW_CHAPTER_COUNT (이전: ${{ steps.analyze.outputs.chapter_count }})"
          
          NOVELS_ADDED="$((NEW_NOVEL_COUNT - ${{ steps.analyze.outputs.novel_count }}))"
          CHAPTERS_ADDED="$((NEW_CHAPTER_COUNT - ${{ steps.analyze.outputs.chapter_count }}))"
          
          echo "변경사항:"
          echo "- 추가된 소설: $NOVELS_ADDED"
          echo "- 추가된 챕터: $CHAPTERS_ADDED"
          
          # 새로 생성된 파일들 표시
          if [ "$NOVELS_ADDED" -gt 0 ] || [ "$CHAPTERS_ADDED" -gt 0 ]; then
            echo ""
            echo "🆕 새로 생성된 파일들:"
            git status --porcelain | grep "^A" | sed 's/^A  /  + /' || echo "  (Git으로 추적되지 않는 새 파일들)"
          fi
          
          echo "✅ 결과 확인 완료"
      
      # =====================================
      # 7. 로그 파일 처리
      # =====================================
      - name: 📝 실행 로그 업로드
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: automation-logs-${{ github.run_id }}
          path: logs/
          retention-days: 30
      
      # =====================================
      # 8. Git 커밋 및 푸시 (DRY RUN이 아닌 경우만)
      # =====================================
      - name: 📤 Git 커밋 및 푸시
        if: steps.generate.outputs.success == 'true' && github.event.inputs.dry_run != 'true'
        run: |
          echo "📤 변경사항 커밋 및 푸시 중..."
          
          # 변경된 파일이 있는지 확인
          if [ -z "$(git status --porcelain)" ]; then
            echo "ℹ️ 변경된 파일이 없습니다. 커밋을 건너뜁니다."
            exit 0
          fi
          
          # 소설 및 챕터 파일만 추가
          git add src/content/novels/ src/content/chapters/
          
          # 커밋 메시지 생성
          TIMESTAMP="$(date '+%Y-%m-%d %H:%M:%S KST')"
          MODE_KOREAN=""
          case "$GENERATION_MODE" in
            "auto") MODE_KOREAN="자동 판단" ;;
            "new_novel") MODE_KOREAN="새 소설 생성" ;;
            "continue_chapter") MODE_KOREAN="챕터 연재" ;;
            "complete_novel") MODE_KOREAN="소설 완결" ;;
            *) MODE_KOREAN="$GENERATION_MODE" ;;
          esac
          
          COMMIT_MSG="🌟 Gemini API 자동 연재: ${MODE_KOREAN}
          
          📊 실행 정보:
          - 모드: ${GENERATION_MODE}
          - 창의성: ${CREATIVITY_LEVEL}
          - 장르: ${TARGET_GENRE}
          - 실행 시간: ${TIMESTAMP}
          - 워크플로우: ${{ github.workflow }}
          - 실행 ID: ${{ github.run_id }}
          
          🤖 시스템 정보:
          - Gemini API 직접 호출 (100% 네이티브)
          - google/generative-ai v0.21.0
          - Node.js 기반 완전 자동화
          - 프로덕션 품질 로맨스 판타지
          
          ✨ 특징:
          - 스마트 우선순위 로직 (완결 > 연재 > 신규)
          - 고품질 메타데이터 자동 관리
          - 감정적 깊이와 몰입감 있는 스토리텔링
          - 로맨스 판타지 전문 트로프 활용
          - Gemini의 긴 컨텍스트와 빠른 응답 활용
          
          Co-Authored-By: Gemini AI <gemini@google.com>
          Generated-By: GitHub Actions Automation"
          
          git commit -m "$COMMIT_MSG"
          
          # 푸시 시도
          echo "🚀 GitHub에 푸시 중..."
          git push origin main
          
          echo "✅ 커밋 및 푸시 완료!"
          COMMIT_SHA="$(git rev-parse HEAD)"
          echo "🔗 변경사항: https://github.com/${{ github.repository }}/commit/${COMMIT_SHA}"
      
      # =====================================
      # 9. Vercel 자동 배포
      # =====================================
      - name: 🚀 Vercel 배포
        if: steps.generate.outputs.success == 'true' && github.event.inputs.dry_run != 'true'
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "🚀 Vercel 배포 시작..."
          
          # Vercel CLI 설치
          echo "📦 Vercel CLI 설치 중..."
          pnpm add -g vercel@latest
          
          # 배포 전 빌드
          echo "🔨 프로젝트 빌드 중..."
          pnpm build || echo "빌드 스크립트가 없거나 실패 (Vercel에서 빌드됨)"
          
          # 프로덕션 배포
          echo "🌐 Vercel 프로덕션 배포 중..."
          vercel --token="$VERCEL_TOKEN" --prod --yes --scope="$VERCEL_ORG_ID" || {
            echo "⚠️ Vercel 배포 실패. 수동 배포가 필요할 수 있습니다."
            echo "GitHub 푸시는 성공했으므로 Vercel이 자동으로 감지하여 배포할 수도 있습니다."
          }
          
          echo "✅ Vercel 배포 프로세스 완료!"
          echo "🔗 배포 URL: https://ro-fi.vercel.app"
      
      # =====================================
      # 10. 실행 완료 요약
      # =====================================
      - name: 📊 실행 결과 요약
        if: always()
        run: |
          echo ""
          echo "🎉======================================"
          echo "📊 Gemini API 자동 연재 실행 완료"
          echo "======================================🎉"
          echo ""
          echo "📋 실행 정보:"
          echo "  - 모드: $GENERATION_MODE"
          echo "  - 창의성: $CREATIVITY_LEVEL"
          echo "  - 장르: $TARGET_GENRE"
          echo "  - 테스트 모드: $DRY_RUN"
          echo "  - 실행 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"
          echo ""
          echo "📈 상태:"
          echo "  - 생성 성공: ${{ steps.generate.outputs.success || 'false' }}"
          echo "  - 소설 수: ${{ steps.analyze.outputs.novel_count || '0' }}"
          echo "  - 챕터 수: ${{ steps.analyze.outputs.chapter_count || '0' }}"
          echo ""
          echo "🔗 유용한 링크:"
          echo "  - 워크플로우: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "  - 배포 사이트: https://ro-fi.vercel.app"
          echo "  - 소설 보기: https://github.com/${{ github.repository }}/tree/main/src/content/novels"
          echo "  - 챕터 보기: https://github.com/${{ github.repository }}/tree/main/src/content/chapters"
          echo ""
          
          if [ "${{ steps.generate.outputs.success }}" = "true" ]; then
            echo "✅ 자동 연재 시스템이 성공적으로 완료되었습니다!"
            echo "🌟 새로운 로맨스 판타지 콘텐츠를 확인해보세요!"
          else
            echo "❌ 실행 중 오류가 발생했습니다."
            echo "📝 로그 파일을 확인하여 문제를 해결해주세요."
          fi
          
          echo ""
          echo "🤖 Gemini API 자동 연재 시스템 v2.0"
          echo "💝 최고 품질의 로맨스 판타지를 선사합니다"

  # =====================================
  # 실패 시 알림 작업
  # =====================================
  notify-failure:
    name: 🚨 실패 알림
    runs-on: ubuntu-latest
    needs: gemini-api-automation
    if: failure()
    
    steps:
      - name: 🚨 실패 이슈 생성
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 자동 연재 실패 - ${new Date().toLocaleDateString('ko-KR')}`;
            const body = `
            ## 🚨 Gemini API 자동 연재 실패
            
            **실행 정보:**
            - 워크플로우: ${{ github.workflow }}
            - 실행 ID: ${{ github.run_id }}
            - 모드: ${{ github.event.inputs.generation_mode || 'auto' }}
            - 창의성: ${{ github.event.inputs.creativity_level || 'high' }}
            - 실행 시간: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}
            
            **확인 사항:**
            - [ ] GEMINI_API_KEY 시크릿 설정 확인
            - [ ] API 할당량 확인
            - [ ] 네트워크 연결 상태 확인
            - [ ] 스크립트 오류 로그 확인
            
            **로그 확인:**
            [워크플로우 실행 로그](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            *자동 생성된 이슈입니다. 문제 해결 후 이슈를 닫아주세요.*
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'automation', 'gemini-api']
            });