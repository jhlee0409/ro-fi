name: Gemini AI Romance Fantasy Automation v3.0

on:
  schedule:
    - cron: '0 2 * * *'
    - cron: '30 6 * * *'
    - cron: '0 12 * * *'
  
  workflow_dispatch:
    inputs:
      generation_mode:
        description: 'Generation Mode'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - new_novel
          - continue_chapter
          - complete_novel
      
      creativity_level:
        description: 'Creativity Level'
        required: false
        default: 'high'
        type: choice
        options:
          - low
          - medium
          - high
      
      dry_run:
        description: 'Test Mode'
        required: false
        default: false
        type: boolean

concurrency:
  group: gemini-automation
  cancel-in-progress: false

jobs:
  gemini-automation:
    name: Gemini AI Automation
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      NODE_ENV: production
      GENERATION_MODE: ${{ github.event.inputs.generation_mode || 'auto' }}
      CREATIVITY_LEVEL: ${{ github.event.inputs.creativity_level || 'high' }}
      DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
      TZ: Asia/Seoul
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: Install Dependencies
        run: |
          echo "Installing dependencies with pnpm..."
          pnpm install --frozen-lockfile
          echo "Installation complete"
      
      - name: Verify Environment
        run: |
          echo "Environment verification:"
          echo "- NODE_ENV: $NODE_ENV"
          echo "- GEMINI_API_KEY exists: ${{ secrets.GEMINI_API_KEY && 'Yes' || 'No' }}"
          echo "- Generation mode: $GENERATION_MODE"
          echo "- Creativity level: $CREATIVITY_LEVEL"
          echo "- Test mode: $DRY_RUN"
          
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "ERROR: GEMINI_API_KEY not set"
            exit 1
          fi
          echo "Environment verification complete"
      
      - name: Test Gemini API
        run: |
          echo "Testing Gemini API connection..."
          node scripts/test-github-environment.js
      
      - name: Prepare Directories
        run: |
          echo "Preparing project directories..."
          mkdir -p src/content/novels src/content/chapters logs
          echo "Directories ready"
      
      - name: Setup Git
        run: |
          git config --global user.name "Gemini AI Automation"
          git config --global user.email "gemini-automation@github.com"
          git config --global init.defaultBranch main
          echo "Git configuration complete"
      
      - name: Analyze Current State
        id: analyze
        run: |
          echo "Analyzing current state..."
          
          NOVEL_COUNT=$(find src/content/novels -name "*.md" 2>/dev/null | wc -l || echo "0")
          CHAPTER_COUNT=$(find src/content/chapters -name "*.md" 2>/dev/null | wc -l || echo "0")
          
          echo "Current state:"
          echo "- Novels: $NOVEL_COUNT"
          echo "- Chapters: $CHAPTER_COUNT"
          
          echo "novel_count=$NOVEL_COUNT" >> $GITHUB_OUTPUT
          echo "chapter_count=$CHAPTER_COUNT" >> $GITHUB_OUTPUT
          echo "Analysis complete"
      
      - name: Run Gemini AI Generation
        id: generate
        run: |
          echo "Starting Gemini AI generation..."
          echo "Mode: $GENERATION_MODE"
          echo "Creativity: $CREATIVITY_LEVEL"
          echo "Test mode: $DRY_RUN"
          
          START_TIME=$(date +%s)
          
          if [ "$DRY_RUN" = "true" ]; then
            echo "Running in test mode..."
            node scripts/ai-novel-generator.js \
              --mode "$GENERATION_MODE" \
              --creativity "$CREATIVITY_LEVEL" \
              --dry-run \
              --verbose
          else
            echo "Running in production mode..."
            node scripts/ai-novel-generator.js \
              --mode "$GENERATION_MODE" \
              --creativity "$CREATIVITY_LEVEL" \
              --verbose
          fi
          
          RESULT=$?
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          
          echo "Execution time: ${DURATION}s"
          
          if [ "$RESULT" -eq 0 ]; then
            echo "Generation successful"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "Generation failed with code: $RESULT"
            echo "success=false" >> $GITHUB_OUTPUT
            exit $RESULT
          fi
      
      - name: Check Results
        if: steps.generate.outputs.success == 'true'
        run: |
          echo "Checking generation results..."
          
          NEW_NOVEL_COUNT=$(find src/content/novels -name "*.md" 2>/dev/null | wc -l || echo "0")
          NEW_CHAPTER_COUNT=$(find src/content/chapters -name "*.md" 2>/dev/null | wc -l || echo "0")
          
          echo "After generation:"
          echo "- Novels: $NEW_NOVEL_COUNT (was: ${{ steps.analyze.outputs.novel_count }})"
          echo "- Chapters: $NEW_CHAPTER_COUNT (was: ${{ steps.analyze.outputs.chapter_count }})"
          
          NOVELS_ADDED=$((NEW_NOVEL_COUNT - ${{ steps.analyze.outputs.novel_count }}))
          CHAPTERS_ADDED=$((NEW_CHAPTER_COUNT - ${{ steps.analyze.outputs.chapter_count }}))
          
          echo "Changes:"
          echo "- Added novels: $NOVELS_ADDED"
          echo "- Added chapters: $CHAPTERS_ADDED"
          echo "Results check complete"
      
      - name: Commit Changes
        if: steps.generate.outputs.success == 'true' && github.event.inputs.dry_run != 'true'
        run: |
          echo "Preparing to commit changes..."
          
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes to commit"
            exit 0
          fi
          
          git add src/content/novels/ src/content/chapters/
          
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S KST')
          WORKFLOW_ID="${{ github.run_id }}"
          
          git commit -m "Gemini AI Auto-Generation: $GENERATION_MODE

Execution Info:
- Mode: $GENERATION_MODE
- Creativity: $CREATIVITY_LEVEL
- Time: $TIMESTAMP
- Workflow ID: $WORKFLOW_ID

Technical Info:
- Gemini API v0.21.0
- pnpm-based automation
- Production quality romance fantasy

Co-Authored-By: Gemini AI <gemini@google.com>
Generated-By: GitHub Actions v3.0"
          
          echo "Commit complete"
          
          echo "Pushing to GitHub..."
          git push origin main
          
          COMMIT_SHA=$(git rev-parse HEAD)
          REPO="${{ github.repository }}"
          echo "Push complete"
          echo "Commit URL: https://github.com/$REPO/commit/$COMMIT_SHA"
      
      - name: Deploy to Vercel
        if: steps.generate.outputs.success == 'true' && github.event.inputs.dry_run != 'true'
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "Starting Vercel deployment..."
          
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "VERCEL_TOKEN not set, skipping deployment"
            echo "Git push completed, Vercel may auto-deploy"
            exit 0
          fi
          
          echo "Installing Vercel CLI..."
          pnpm add -g vercel@latest
          
          echo "Building project..."
          pnpm build || echo "Build failed - Vercel will build"
          
          echo "Deploying to production..."
          vercel --token="$VERCEL_TOKEN" --prod --yes --scope="$VERCEL_ORG_ID" || {
            echo "Vercel deployment failed"
            echo "Git push succeeded, auto-deployment may trigger"
          }
          
          echo "Vercel deployment process complete"
          echo "Site URL: https://ro-fi.vercel.app"
      
      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: automation-logs
          path: logs/
          retention-days: 30
      
      - name: Summary
        if: always()
        run: |
          echo ""
          echo "========================================"
          echo "Gemini AI Automation Complete - v3.0"
          echo "========================================"
          echo ""
          echo "Execution Info:"
          echo "- Mode: $GENERATION_MODE"
          echo "- Creativity: $CREATIVITY_LEVEL"
          echo "- Test Mode: $DRY_RUN"
          echo "- Completed: $(date '+%Y-%m-%d %H:%M:%S KST')"
          echo ""
          echo "Results:"
          echo "- Generation Success: ${{ steps.generate.outputs.success || 'false' }}"
          echo "- Novel Count: ${{ steps.analyze.outputs.novel_count || '0' }}"
          echo "- Chapter Count: ${{ steps.analyze.outputs.chapter_count || '0' }}"
          echo ""
          REPO="${{ github.repository }}"
          RUN_ID="${{ github.run_id }}"
          echo "Links:"
          echo "- Workflow: https://github.com/$REPO/actions/runs/$RUN_ID"
          echo "- Website: https://ro-fi.vercel.app"
          echo "- Novels: https://github.com/$REPO/tree/main/src/content/novels"
          echo "- Chapters: https://github.com/$REPO/tree/main/src/content/chapters"
          echo ""
          
          if [ "${{ steps.generate.outputs.success }}" = "true" ]; then
            echo "SUCCESS: Automation completed successfully!"
            echo "New romance fantasy content is ready!"
          else
            echo "ERROR: Execution failed"
            echo "Check logs for troubleshooting"
          fi
          
          echo ""
          echo "Gemini AI Automation v3.0 - 100% pnpm"
          echo "High-quality romance fantasy generation"
          echo ""

  failure-notification:
    name: Failure Notification
    runs-on: ubuntu-latest
    needs: gemini-automation
    if: failure()
    
    steps:
      - name: Create Failure Issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Gemini AI Automation Failed - ${new Date().toLocaleDateString('ko-KR')}`;
            const body = `
            ## Gemini AI Automation Failure
            
            **Execution Info:**
            - Workflow: ${{ github.workflow }}
            - Run ID: ${{ github.run_id }}
            - Mode: ${{ github.event.inputs.generation_mode || 'auto' }}
            - Creativity: ${{ github.event.inputs.creativity_level || 'high' }}
            - Time: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}
            
            **Check Items:**
            - [ ] GEMINI_API_KEY secret configuration
            - [ ] pnpm dependency installation
            - [ ] API quota and connection status
            - [ ] Script execution error logs
            
            **Troubleshooting:**
            1. [Workflow Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Download log artifacts for detailed analysis
            3. Verify environment variables and secrets
            
            ---
            *Auto-generated issue - close after resolution*
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'automation', 'gemini-api', 'v3.0']
            });