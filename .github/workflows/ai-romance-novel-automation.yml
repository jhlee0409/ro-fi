name: 🤖 Gemini AI 로맨스 판타지 완전 자동화 v3.0

# 완전히 수정된 pnpm 기반 워크플로우
# 100% 검증된 Gemini API + GitHub Actions 자동화

on:
  # 📅 정기 실행 스케줄 (KST 기준)
  schedule:
    - cron: '0 2 * * *'   # 11:00 KST - 메인 연재 시간
    - cron: '30 6 * * *'  # 15:30 KST - 오후 업데이트
    - cron: '0 12 * * *'  # 21:00 KST - 저녁 연재
  
  # 🎮 수동 실행
  workflow_dispatch:
    inputs:
      generation_mode:
        description: '📚 생성 모드'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - new_novel
          - continue_chapter
          - complete_novel
      
      creativity_level:
        description: '🎨 창의성 레벨'
        required: false
        default: 'high'
        type: choice
        options:
          - low
          - medium
          - high
      
      dry_run:
        description: '🔍 테스트 모드'
        required: false
        default: false
        type: boolean

# 동시 실행 제한
concurrency:
  group: gemini-automation-${{ github.ref }}
  cancel-in-progress: false

jobs:
  gemini-automation:
    name: 🌟 Gemini AI 자동 연재
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      NODE_ENV: production
      GENERATION_MODE: ${{ github.event.inputs.generation_mode || 'auto' }}
      CREATIVITY_LEVEL: ${{ github.event.inputs.creativity_level || 'high' }}
      DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
      TZ: Asia/Seoul
    
    steps:
      # ===========================================
      # 1. 환경 준비 (pnpm 기반)
      # ===========================================
      - name: 📥 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📦 pnpm 설치
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false
      
      - name: 🚀 Node.js 환경 설정
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: 🔧 의존성 설치
        run: |
          echo "🔧 pnpm으로 의존성 설치 중..."
          pnpm install --frozen-lockfile
          echo "✅ 설치 완료"
          echo "📊 설치된 패키지 수: $(pnpm list --depth=0 | grep -c '─')"
      
      # ===========================================
      # 2. 환경 검증
      # ===========================================
      - name: 🔍 환경변수 검증
        run: |
          echo "🔍 환경변수 상태:"
          echo "  - NODE_ENV: $NODE_ENV"
          echo "  - GEMINI_API_KEY: $([ -n "$GEMINI_API_KEY" ] && echo '✅ 설정됨' || echo '❌ 없음')"
          echo "  - API 키 길이: ${#GEMINI_API_KEY}"
          echo "  - 생성 모드: $GENERATION_MODE"
          echo "  - 창의성: $CREATIVITY_LEVEL"
          echo "  - 테스트 모드: $DRY_RUN"
          
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "❌ GEMINI_API_KEY가 설정되지 않았습니다"
            echo "GitHub Secrets에 GEMINI_API_KEY를 설정해주세요"
            exit 1
          fi
          
          echo "✅ 모든 환경변수 검증 완료"
      
      - name: 🧪 Gemini API 연결 테스트
        run: |
          echo "🧪 Gemini API 연결 테스트 중..."
          node scripts/test-github-environment.js
      
      - name: 📁 디렉토리 준비
        run: |
          echo "📁 프로젝트 디렉토리 확인:"
          echo "  - 소설: $([ -d src/content/novels ] && echo '✅' || echo '❌ 생성 필요') src/content/novels"
          echo "  - 챕터: $([ -d src/content/chapters ] && echo '✅' || echo '❌ 생성 필요') src/content/chapters"
          echo "  - 스크립트: $([ -f scripts/ai-novel-generator.js ] && echo '✅' || echo '❌') scripts/ai-novel-generator.js"
          
          mkdir -p src/content/novels src/content/chapters logs
          echo "✅ 모든 디렉토리 준비 완료"
      
      # ===========================================
      # 3. Git 설정
      # ===========================================
      - name: 👤 Git 사용자 설정
        run: |
          git config --global user.name "🤖 Gemini AI 자동화"
          git config --global user.email "gemini-automation@github.com"
          git config --global init.defaultBranch main
          echo "✅ Git 설정 완료"
      
      # ===========================================
      # 4. 현재 상태 분석
      # ===========================================
      - name: 📊 연재 상황 분석
        id: analyze
        run: |
          echo "📊 현재 상황 분석 중..."
          
          NOVEL_COUNT="$(find src/content/novels -name "*.md" 2>/dev/null | wc -l || echo "0")"
          CHAPTER_COUNT="$(find src/content/chapters -name "*.md" 2>/dev/null | wc -l || echo "0")"
          
          echo "현재 상황:"
          echo "  - 총 소설: $NOVEL_COUNT"
          echo "  - 총 챕터: $CHAPTER_COUNT"
          
          if [ "$NOVEL_COUNT" -gt 0 ]; then
            echo "📚 기존 소설:"
            find src/content/novels -name "*.md" 2>/dev/null | while read file; do
              echo "    - $(basename "$file" .md)"
            done
          fi
          
          echo "novel_count=$NOVEL_COUNT" >> $GITHUB_OUTPUT
          echo "chapter_count=$CHAPTER_COUNT" >> $GITHUB_OUTPUT
          echo "✅ 분석 완료"
      
      # ===========================================
      # 5. 메인 Gemini AI 실행
      # ===========================================
      - name: 🌟 Gemini AI 자동 생성 실행
        id: generate
        run: |
          echo "🌟 Gemini AI 자동 연재 시작"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "설정 정보:"
          echo "  🎯 모드: $GENERATION_MODE"
          echo "  🎨 창의성: $CREATIVITY_LEVEL"
          echo "  🔍 테스트: $DRY_RUN"
          echo "  📅 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          # 실행 시간 측정
          START_TIME="$(date +%s)"
          
          # Gemini AI 스크립트 실행
          if [ "$DRY_RUN" = "true" ]; then
            echo "🔍 테스트 모드로 실행..."
            node scripts/ai-novel-generator.js \
              --mode "$GENERATION_MODE" \
              --creativity "$CREATIVITY_LEVEL" \
              --dry-run \
              --verbose
          else
            echo "🚀 실제 생성 모드로 실행..."
            node scripts/ai-novel-generator.js \
              --mode "$GENERATION_MODE" \
              --creativity "$CREATIVITY_LEVEL" \
              --verbose
          fi
          
          RESULT=$?
          END_TIME="$(date +%s)"
          DURATION=$((END_TIME - START_TIME))
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "⏱️ 실행 시간: ${DURATION}초"
          
          if [ "$RESULT" -eq 0 ]; then
            echo "✅ Gemini AI 생성 성공!"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ 생성 실패 (코드: $RESULT)"
            echo "success=false" >> $GITHUB_OUTPUT
            exit $RESULT
          fi
      
      # ===========================================
      # 6. 결과 확인
      # ===========================================
      - name: 📋 생성 결과 확인
        if: steps.generate.outputs.success == 'true'
        run: |
          echo "📋 생성 후 상태:"
          
          NEW_NOVEL_COUNT="$(find src/content/novels -name "*.md" 2>/dev/null | wc -l || echo "0")"
          NEW_CHAPTER_COUNT="$(find src/content/chapters -name "*.md" 2>/dev/null | wc -l || echo "0")"
          
          echo "  - 현재 소설: $NEW_NOVEL_COUNT (이전: ${{ steps.analyze.outputs.novel_count }})"
          echo "  - 현재 챕터: $NEW_CHAPTER_COUNT (이전: ${{ steps.analyze.outputs.chapter_count }})"
          
          NOVELS_ADDED="$((NEW_NOVEL_COUNT - ${{ steps.analyze.outputs.novel_count }}))"
          CHAPTERS_ADDED="$((NEW_CHAPTER_COUNT - ${{ steps.analyze.outputs.chapter_count }}))"
          
          echo ""
          echo "📈 변경사항:"
          echo "  - 추가된 소설: $NOVELS_ADDED"
          echo "  - 추가된 챕터: $CHAPTERS_ADDED"
          
          if [ "$NOVELS_ADDED" -gt 0 ] || [ "$CHAPTERS_ADDED" -gt 0 ]; then
            echo ""
            echo "🆕 새 파일들:"
            git status --porcelain | grep "^A\|^??" | head -10
          fi
          echo "✅ 결과 확인 완료"
      
      # ===========================================
      # 7. Git 커밋 및 푸시
      # ===========================================
      - name: 📤 변경사항 커밋
        if: steps.generate.outputs.success == 'true' && github.event.inputs.dry_run != 'true'
        run: |
          echo "📤 Git 커밋 준비..."
          
          if [ -z "$(git status --porcelain)" ]; then
            echo "ℹ️ 변경사항 없음. 커밋 건너뜀."
            exit 0
          fi
          
          # 소설/챕터 파일만 추가
          git add src/content/novels/ src/content/chapters/
          
          # 커밋 메시지 생성
          TIMESTAMP="$(date '+%Y-%m-%d %H:%M:%S KST')"
          
          COMMIT_MSG="🌟 Gemini AI 자동 연재: $GENERATION_MODE
          
📊 실행 정보:
- 모드: $GENERATION_MODE
- 창의성: $CREATIVITY_LEVEL  
- 실행 시간: $TIMESTAMP
- 워크플로우 ID: ${{ github.run_id }}

🤖 기술 정보:
- Gemini API v0.21.0 직접 호출
- pnpm 기반 완전 자동화
- 프로덕션 품질 로맨스 판타지
- GitHub Actions 네이티브 실행

✨ 특징:
- 스마트 우선순위 (완결 > 연재 > 신규)
- 고품질 메타데이터 관리
- 감정적 깊이와 몰입감
- 로맨스 판타지 전문 트로프

Co-Authored-By: Gemini AI <gemini@google.com>
Generated-By: GitHub Actions v3.0"
          
          git commit -m "$COMMIT_MSG"
          echo "✅ 커밋 완료"
          
          echo "🚀 GitHub 푸시 중..."
          git push origin main
          
          COMMIT_SHA="$(git rev-parse HEAD)"
          echo "✅ 푸시 완료!"
          echo "🔗 커밋: https://github.com/${{ github.repository }}/commit/$COMMIT_SHA"
      
      # ===========================================
      # 8. Vercel 배포
      # ===========================================
      - name: 🚀 Vercel 자동 배포
        if: steps.generate.outputs.success == 'true' && github.event.inputs.dry_run != 'true'
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "🚀 Vercel 배포 시작..."
          
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "⚠️ VERCEL_TOKEN이 없어 배포를 건너뜁니다"
            echo "Git 푸시는 완료되었으므로 Vercel이 자동 배포할 수 있습니다"
            exit 0
          fi
          
          echo "📦 Vercel CLI 설치..."
          pnpm add -g vercel@latest
          
          echo "🔨 프로젝트 빌드..."
          pnpm build || echo "빌드 실패 - Vercel에서 빌드됩니다"
          
          echo "🌐 프로덕션 배포..."
          vercel --token="$VERCEL_TOKEN" --prod --yes --scope="$VERCEL_ORG_ID" || {
            echo "⚠️ Vercel 배포 실패"
            echo "Git 푸시는 성공했으므로 자동 배포가 트리거될 수 있습니다"
          }
          
          echo "✅ Vercel 배포 프로세스 완료"
          echo "🔗 사이트: https://ro-fi.vercel.app"
      
      # ===========================================
      # 9. 로그 업로드
      # ===========================================
      - name: 📝 실행 로그 보관
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gemini-automation-logs-${{ github.run_id }}
          path: logs/
          retention-days: 30
      
      # ===========================================
      # 10. 실행 완료 요약
      # ===========================================
      - name: 🎉 실행 결과 요약
        if: always()
        run: |
          echo ""
          echo "🎉━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 Gemini AI 자동 연재 실행 완료 - v3.0"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━🎉"
          echo ""
          echo "📋 실행 정보:"
          echo "  🎯 모드: $GENERATION_MODE"
          echo "  🎨 창의성: $CREATIVITY_LEVEL"
          echo "  🔍 테스트: $DRY_RUN"
          echo "  📅 완료: $(date '+%Y-%m-%d %H:%M:%S KST')"
          echo ""
          echo "📈 결과:"
          echo "  ✨ 생성 성공: ${{ steps.generate.outputs.success || 'false' }}"
          echo "  📚 소설 수: ${{ steps.analyze.outputs.novel_count || '0' }}"
          echo "  📖 챕터 수: ${{ steps.analyze.outputs.chapter_count || '0' }}"
          echo ""
          echo "🔗 링크:"
          echo "  📊 워크플로우: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "  🌐 웹사이트: https://ro-fi.vercel.app"
          echo "  📚 소설 목록: https://github.com/${{ github.repository }}/tree/main/src/content/novels"
          echo "  📖 챕터 목록: https://github.com/${{ github.repository }}/tree/main/src/content/chapters"
          echo ""
          
          if [ "${{ steps.generate.outputs.success }}" = "true" ]; then
            echo "✅ 🌟 자동 연재 시스템이 성공적으로 완료되었습니다!"
            echo "💝 새로운 로맨스 판타지 콘텐츠를 확인해보세요!"
          else
            echo "❌ 🚨 실행 중 오류가 발생했습니다."
            echo "📝 로그 아티팩트를 확인하여 문제를 진단해주세요."
          fi
          
          echo ""
          echo "🤖 Gemini AI 자동 연재 시스템 v3.0 - 100% pnpm 기반"
          echo "💖 최고 품질의 로맨스 판타지를 선사합니다"
          echo ""

  # ===========================================
  # 실패 알림
  # ===========================================
  failure-notification:
    name: 🚨 실패 알림
    runs-on: ubuntu-latest
    needs: gemini-automation
    if: failure()
    
    steps:
      - name: 🚨 실패 이슈 생성
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Gemini AI 자동 연재 실패 - ${new Date().toLocaleDateString('ko-KR')}`;
            const body = `
            ## 🚨 Gemini AI 자동 연재 시스템 실패
            
            **실행 정보:**
            - 워크플로우: ${{ github.workflow }}
            - 실행 ID: ${{ github.run_id }}
            - 모드: ${{ github.event.inputs.generation_mode || 'auto' }}
            - 창의성: ${{ github.event.inputs.creativity_level || 'high' }}
            - 실행 시간: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}
            
            **확인 사항:**
            - [ ] GEMINI_API_KEY 시크릿 설정 확인
            - [ ] pnpm 의존성 설치 문제 확인
            - [ ] API 할당량 및 연결 상태 확인
            - [ ] 스크립트 실행 오류 로그 확인
            
            **문제 해결:**
            1. [워크플로우 로그 확인](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. 로그 아티팩트 다운로드 후 상세 분석
            3. 환경변수 및 시크릿 설정 재확인
            
            ---
            *v3.0 자동 생성 이슈 - 해결 후 이슈를 닫아주세요*
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'automation', 'gemini-api', 'v3.0']
            });