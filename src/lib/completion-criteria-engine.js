export class CompletionCriteriaEngine {
  constructor() {
    this.minimumChapters = 50;
    this.maximumChapters = 100;
    this.idealChapters = 75;
    
    this.storyArcStages = {
      exposition: { weight: 10, keywords: ["ÏãúÏûë", "ÏÜåÍ∞ú", "ÏÑ§Ï†ï"] },
      risingAction: { weight: 30, keywords: ["Î∞úÏ†Ñ", "Í∞àÎì±", "ÏÉÅÏäπ"] },
      climax: { weight: 20, keywords: ["Ï†àÏ†ï", "ÌÅ¥ÎùºÏù¥Îß•Ïä§", "ÏµúÍ≥†Ï°∞"] },
      fallingAction: { weight: 25, keywords: ["Ìï¥Í≤∞", "Ï†ïÎ¶¨", "ÏàòÏäµ"] },
      resolution: { weight: 15, keywords: ["Í≤∞Îßê", "ÎßàÎ¨¥Î¶¨", "ÏôÑÍ≤∞"] }
    };

    this.relationshipStages = {
      hostility: { progress: 0, description: "Ï†ÅÎåÄÏ†Å Í¥ÄÍ≥Ñ" },
      tension: { progress: 25, description: "Í∏¥Ïû•Í≥º Í∞àÎì±" },
      attraction: { progress: 50, description: "ÏÑúÎ°úÏóê ÎåÄÌïú ÎÅåÎ¶º" },
      confession: { progress: 75, description: "Í≥†Î∞±Í≥º Í∞êÏ†ï ÌôïÏù∏" },
      union: { progress: 100, description: "Í≤∞Ìï©Í≥º ÏôÑÏÑ±" }
    };

    this.endingTypes = {
      'enemies-to-lovers': {
        scenes: ["ÏµúÏ¢Ö ÎåÄÍ≤∞", "ÏßÑÏã§ Ìè≠Î°ú", "Í∞êÏ†ï Í≥†Î∞±", "ÌôîÌï¥", "Í≤∞Ìï©"],
        epilogue: "Î™á ÎÖÑ ÌõÑ ÌñâÎ≥µÌïú ÏùºÏÉÅ"
      },
      'fake-relationship': {
        scenes: ["Í∞ÄÏßú Í¥ÄÍ≥Ñ Ï¢ÖÎ£å", "ÏßÑÏã¨ Íπ®Îã¨Ïùå", "Ïû¨Ìöå", "ÏßÑÏ†ïÌïú Í≥†Î∞±", "Í≤∞Ìï©"],
        epilogue: "ÏßÑÏßú Í¥ÄÍ≥ÑÎ°ú Î∞úÏ†ÑÌïú Î™®Ïäµ"
      },
      'second-chance': {
        scenes: ["Í≥ºÍ±∞ Ï≤≠ÏÇ∞", "Ïö©ÏÑú", "ÏÉàÎ°úÏö¥ ÏãúÏûë", "ÏïΩÏÜç", "ÎØ∏Îûò Í≥ÑÌöç"],
        epilogue: "Îçî ÏÑ±ÏàôÌï¥ÏßÑ Í¥ÄÍ≥Ñ"
      },
      'forbidden-love': {
        scenes: ["Ïû•Ïï†Î¨º Í∑πÎ≥µ", "ÏÇ¨ÌöåÏ†Å Ïù∏Ï†ï", "ÏÑ†ÌÉùÏùò ÏàúÍ∞Ñ", "Ìù¨ÏÉù", "ÏäπÎ¶¨"],
        epilogue: "ÏûêÏú†Î°úÏõåÏßÑ ÏÇ¨Îûë"
      }
    };
  }

  checkStoryCompletion(novel) {
    const criteria = {
      minChaptersMet: novel.currentChapter >= this.minimumChapters,
      mainConflictResolved: this.checkMainConflictResolution(novel),
      relationshipFinalized: this.checkRelationshipCompletion(novel),
      subplotsWrapped: this.checkSubplotCompletion(novel),
      characterArcsComplete: this.checkCharacterGrowthCompletion(novel)
    };

    // 5Í∞ú Í∏∞Ï§Ä Ï§ë 4Í∞ú Ïù¥ÏÉÅ Ï∂©Ï°±Ïãú ÏôÑÍ≤∞ Í∞ÄÎä•
    const metCriteria = Object.values(criteria).filter(Boolean).length;
    return metCriteria >= 4;
  }

  checkMainConflictResolution(novel) {
    const resolutionKeywords = ["Í≤∞Îßê", "Ìï¥Í≤∞", "ÏôÑÎ£å", "Í∑πÎ≥µ", "ÏäπÎ¶¨"];
    return novel.plotProgress.some(stage => 
      resolutionKeywords.some(keyword => stage.includes(keyword))
    );
  }

  checkRelationshipCompletion(novel) {
    const completionStages = ["confession", "union"];
    return completionStages.includes(novel.relationshipStage);
  }

  checkSubplotCompletion(novel) {
    return novel.openThreads.length <= 1; // 1Í∞ú Ïù¥ÌïòÏùò ÎØ∏Ìï¥Í≤∞ ÏÑúÎ∏åÌîåÎ°Ø ÌóàÏö©
  }

  checkCharacterGrowthCompletion(novel) {
    const mainCharacters = novel.characters.filter(char => 
      char.name.includes("Ï£ºÏù∏Í≥µ") || char.name.includes("ÎÇ®Ï£º")
    );
    return mainCharacters.every(char => char.growthArc >= 85);
  }

  analyzeStoryArc(novel) {
    const totalProgress = novel.plotProgress.length;
    const currentStage = novel.plotProgress[totalProgress - 1] || "ÏãúÏûë";
    
    let arcCompletion = 0;
    for (const [stageName, data] of Object.entries(this.storyArcStages)) {
      if (data.keywords.some(keyword => currentStage.includes(keyword))) {
        arcCompletion = data.weight;
        // Ïä§ÌÖåÏù¥ÏßÄ Ï†ïÎ≥¥Î•º Î°úÍπÖÏóê ÌôúÏö©
        console.log(`üìä ÌòÑÏû¨ Ïä§ÌÜ†Î¶¨ Îã®Í≥Ñ: ${stageName} (ÏßÑÌñâÎèÑ: ${data.weight}%)`);
        break;
      }
    }

    return {
      currentStage,
      completionPercentage: Math.min(arcCompletion + (totalProgress * 15), 100),
      nextStage: this.getNextStoryStage(currentStage),
      readyForEnding: currentStage.includes("Í≤∞Îßê") || arcCompletion >= 80
    };
  }

  getNextStoryStage(currentStage) {
    if (currentStage.includes("ÏãúÏûë")) return "Í∞àÎì± Î∞úÏ†Ñ Îã®Í≥Ñ";
    if (currentStage.includes("Î∞úÏ†Ñ")) return "ÌÅ¥ÎùºÏù¥Îß•Ïä§ Ï§ÄÎπÑ";
    if (currentStage.includes("Ï†àÏ†ï")) return "Í∞àÎì± Ìï¥Í≤∞ ÏãúÏûë";
    if (currentStage.includes("Ìï¥Í≤∞")) return "Í≤∞Îßê Îã®Í≥Ñ";
    return "ÎßàÎ¨¥Î¶¨ Î∞è ÏôÑÍ≤∞";
  }

  analyzeRelationshipProgress(novel) {
    const currentStage = novel.relationshipStage;
    const stageData = this.relationshipStages[currentStage];
    
    return {
      currentStage: stageData?.description || "ÎØ∏Ï†ïÏùò Îã®Í≥Ñ",
      progress: stageData?.progress || 0,
      readyForConclusion: stageData?.progress >= 75,
      nextMilestone: this.getNextRelationshipMilestone(currentStage)
    };
  }

  getNextRelationshipMilestone(currentStage) {
    const stages = Object.keys(this.relationshipStages);
    const currentIndex = stages.indexOf(currentStage);
    const nextStage = stages[currentIndex + 1];
    
    return nextStage ? this.relationshipStages[nextStage].description : "Í¥ÄÍ≥Ñ ÏôÑÏÑ±";
  }

  checkSubplotResolution(novel) {
    return {
      openThreads: novel.openThreads.length,
      resolutionNeeded: novel.openThreads,
      readyForEnding: novel.openThreads.length <= 1,
      priority: novel.openThreads.length > 2 ? "high" : "low"
    };
  }

  evaluateCharacterGrowth(novel) {
    const growthAnalysis = novel.characters.map(char => ({
      name: char.name,
      growth: char.growthArc,
      completed: char.growthArc >= 85,
      needsWork: char.growthArc < 70
    }));

    const completedCount = growthAnalysis.filter(char => char.completed).length;
    const totalCharacters = growthAnalysis.length;

    return {
      characters: growthAnalysis,
      overallCompletion: Math.round((completedCount / totalCharacters) * 100),
      readyForEnding: completedCount >= Math.ceil(totalCharacters * 0.8)
    };
  }

  prepareEnding(chapterNumber) {
    if (chapterNumber < this.minimumChapters - 10) {
      return {
        phase: "development",
        pacing: "normal",
        focus: "character_growth",
        chaptersRemaining: this.minimumChapters - chapterNumber
      };
    }

    if (chapterNumber >= this.minimumChapters - 10 && chapterNumber < this.minimumChapters) {
      return {
        phase: "pre_ending",
        pacing: "accelerated",
        focus: "conflict_resolution",
        threads: "convergence",
        tension: "building_to_climax",
        hints: "ending_foreshadowing",
        chaptersRemaining: Math.max(0, this.minimumChapters - chapterNumber)
      };
    }

    return {
      phase: "ending_ready",
      pacing: "climactic",
      focus: "resolution",
      threads: "final_convergence",
      tension: "peak",
      hints: "immediate_resolution",
      recommendation: "begin_ending_sequence"
    };
  }

  generateEndingScenario(novel) {
    // Ï£ºÏöî Ìä∏Î°úÌîÑÏóê Îî∞Î•∏ Í≤∞Îßê ÏãúÎÇòÎ¶¨Ïò§ ÏÑ†ÌÉù
    const relationshipType = this.detectRelationshipType(novel);
    const endingTemplate = this.endingTypes[relationshipType] || this.endingTypes['enemies-to-lovers'];

    return {
      type: relationshipType,
      scenes: endingTemplate.scenes,
      epilogueContent: endingTemplate.epilogue,
      estimatedChapters: endingTemplate.scenes.length + 1, // +1 for epilogue
      tone: "satisfying_conclusion",
      themes: this.extractEndingThemes(novel)
    };
  }

  detectRelationshipType(novel) {
    // Í∞ÑÎã®Ìïú Ìå®ÌÑ¥ Îß§Ïπ≠ÏúºÎ°ú Í¥ÄÍ≥Ñ ÌÉÄÏûÖ Í∞êÏßÄ
    if (novel.relationshipStage === "hostility") return "enemies-to-lovers";
    if (novel.openThreads.some(thread => thread.includes("Í∞ÄÏßú"))) return "fake-relationship";
    if (novel.openThreads.some(thread => thread.includes("Í≥ºÍ±∞"))) return "second-chance";
    if (novel.openThreads.some(thread => thread.includes("Í∏àÏßÄ"))) return "forbidden-love";
    
    return "enemies-to-lovers"; // Í∏∞Î≥∏Í∞í
  }

  extractEndingThemes(novel) {
    const themes = [];
    
    if (novel.characters.some(char => char.growthArc > 90)) {
      themes.push("Í∞úÏù∏Ï†Å ÏÑ±Ïû•");
    }
    
    if (novel.relationshipStage === "union") {
      themes.push("ÏÇ¨ÎûëÏùò ÏäπÎ¶¨");
    }
    
    if (novel.openThreads.length <= 1) {
      themes.push("Í∞àÎì± Ìï¥Í≤∞");
    }
    
    themes.push("Ìù¨ÎßùÏ†Å ÎØ∏Îûò", "ÏÉàÎ°úÏö¥ ÏãúÏûë");
    
    return themes;
  }

  shouldIncludeEpilogue(novel) {
    // ÏóêÌïÑÎ°úÍ∑∏ ÌïÑÏöîÏÑ± ÌåêÎã®
    const factors = {
      characterGrowthSignificant: novel.characters.some(char => char.growthArc > 95),
      relationshipFullyDeveloped: novel.relationshipStage === "union",
      complexPlotResolved: novel.openThreads.length === 0,
      readerSatisfactionNeeded: novel.currentChapter >= this.idealChapters
    };

    const positiveFactors = Object.values(factors).filter(Boolean).length;
    return positiveFactors >= 3;
  }

  generateCompletionReport(novel) {
    const storyArc = this.analyzeStoryArc(novel);
    const relationship = this.analyzeRelationshipProgress(novel);
    const subplots = this.checkSubplotResolution(novel);
    const characters = this.evaluateCharacterGrowth(novel);
    const readyForEnding = this.checkStoryCompletion(novel);

    return {
      overallReadiness: readyForEnding,
      storyArc,
      relationship,
      subplots,
      characters,
      recommendation: readyForEnding ? "Begin ending sequence" : "Continue development",
      estimatedChaptersToCompletion: readyForEnding ? 5 : Math.max(10, this.minimumChapters - novel.currentChapter)
    };
  }
}