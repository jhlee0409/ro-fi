---
/**
 * 챕터 내 포인트 이미지 컴포넌트
 * 2025 Modern Design with lazy loading and smooth animations
 */
import type { ChapterImagePoint } from '../lib/types/image-types';

interface Props {
  imagePoint: ChapterImagePoint;
  imageUrl?: string;
  className?: string;
  novelSlug?: string;
  chapterNumber?: number;
}

const { imagePoint, imageUrl, className = '', novelSlug, chapterNumber } = Astro.props;

// 이미지 URL 자동 결정 (실제 AI 이미지 우선, 플레이스홀더는 fallback)
let finalImageUrl = imageUrl;

if (!finalImageUrl && novelSlug) {
  // 소설 커버인 경우
  if (imagePoint.chapterTitle === '소설 커버') {
    // 실제 AI 이미지 우선, 없으면 플레이스홀더
    finalImageUrl = `/images/novels/${novelSlug}-cover.jpg`;
  }
  // 챕터 이미지인 경우
  else if (chapterNumber) {
    // 실제 AI 이미지 우선, 없으면 플레이스홀더
    finalImageUrl = `/images/chapters/${novelSlug}-ch${chapterNumber}.jpg`;
  }
}

// 이미지 플레이스홀더 생성 (실제 이미지가 없을 때)
const placeholderGradient = {
  'dramatic': 'from-slate-600 to-slate-800',
  'romantic': 'from-rose-400 to-pink-600', 
  'mysterious': 'from-indigo-600 to-purple-800',
  'action': 'from-orange-500 to-red-600',
  'emotional': 'from-blue-400 to-indigo-600'
}[imagePoint.mood] || 'from-stone-400 to-stone-600';

const moodIcon = {
  'dramatic': '🎭',
  'romantic': '💕',
  'mysterious': '🔮',
  'action': '⚡',
  'emotional': '💫'
}[imagePoint.mood] || '✨';

const typeLabel = {
  'scene_transition': '장면 전환',
  'character_moment': '캐릭터 순간',
  'romance_tension': '로맨스 클라이맥스',
  'fantasy_element': '판타지 요소',
  'visual_highlight': '하이라이트 장면'
}[imagePoint.type] || '특별한 순간';
---

<div class={`chapter-image-point relative overflow-hidden rounded-3xl shadow-modern group hover:shadow-glow transition-all duration-500 ${className}`}>
  <!-- Image Container -->
  <div class="relative aspect-[16/9] bg-gradient-to-br overflow-hidden">
    {finalImageUrl ? (
      <!-- Actual Generated Image -->
      <img 
        src={finalImageUrl}
        alt={imagePoint.description}
        class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-700"
        loading="lazy"
        decoding="async"
        data-novel-slug={novelSlug}
        data-chapter-number={chapterNumber}
        data-is-cover={imagePoint.chapterTitle === '소설 커버' ? 'true' : 'false'}
      />
    ) : (
      <!-- Placeholder with AI-Generated Style -->
      <div class={`w-full h-full bg-gradient-to-br ${placeholderGradient} flex items-center justify-center relative`}>
        <!-- Subtle Pattern Overlay -->
        <div class="absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cg fill=\"%23ffffff\" fill-opacity=\"0.05\"%3E%3Cpath d=\"M20 20.5V18H22V20.5H24.5V22H22V24.5H20V22H17.5V20.5H20Z\"/%3E%3C/g%3E%3C/svg%3E')] opacity-30"></div>
        
        <!-- Central Icon -->
        <div class="relative z-10 text-center text-white/90">
          <div class="text-6xl mb-4 filter drop-shadow-lg">{moodIcon}</div>
          <div class="text-lg font-semibold mb-2">이미지 생성 중...</div>
          <div class="text-sm opacity-75">AI가 장면을 그리고 있습니다</div>
        </div>
        
        <!-- Animated Loading Rings -->
        <div class="absolute inset-0 flex items-center justify-center">
          <div class="w-32 h-32 border-2 border-white/20 rounded-full animate-ping"></div>
          <div class="absolute w-24 h-24 border-2 border-white/30 rounded-full animate-pulse"></div>
        </div>
      </div>
    )}
    
    <!-- Gradient Overlay for Text Readability -->
    <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
    
    <!-- Image Metadata Badge -->
    <div class="absolute top-4 left-4">
      <span class="inline-flex items-center px-3 py-1.5 rounded-full text-xs font-semibold bg-white/90 backdrop-blur-sm text-ink-900 shadow-soft">
        <span class="mr-1">{moodIcon}</span>
        {typeLabel}
      </span>
    </div>
    
    <!-- Position Indicator -->
    <div class="absolute top-4 right-4">
      <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-rose-500/90 text-white backdrop-blur-sm">
        {Math.round(imagePoint.position)}%
      </span>
    </div>
  </div>
  
  <!-- Image Description Overlay (Hover) -->
  <div class="absolute inset-x-0 bottom-0 p-6 transform translate-y-full group-hover:translate-y-0 transition-transform duration-500 bg-gradient-to-t from-black/90 to-transparent">
    <div class="text-white">
      <h3 class="font-display font-bold text-lg mb-2 leading-tight">
        {imagePoint.description}
      </h3>
      
      <!-- Characters and Setting -->
      {(imagePoint.characters && imagePoint.characters.length > 0) && (
        <div class="flex items-center text-sm opacity-90 mb-2">
          <span class="mr-2">👥</span>
          <span>{imagePoint.characters.join(', ')}</span>
        </div>
      )}
      
      <div class="flex items-center text-sm opacity-90">
        <span class="mr-2">📍</span>
        <span>{imagePoint.setting}</span>
      </div>
    </div>
  </div>
  
  <!-- Interactive Glow Effect -->
  <div class="absolute inset-0 rounded-3xl border border-transparent group-hover:border-rose-200/50 transition-colors duration-500"></div>
</div>

<!-- Enhance with JavaScript for Progressive Loading -->
<script>
  // Progressive image loading and error handling
  document.addEventListener('DOMContentLoaded', () => {
    const imagePoints = document.querySelectorAll('.chapter-image-point img');
    
    imagePoints.forEach(img => {
      img.addEventListener('load', () => {
        img.classList.add('fade-in-loaded');
      });
      
      img.addEventListener('error', () => {
        // Fallback to SVG placeholder on error
        const novelSlug = img.getAttribute('data-novel-slug');
        const chapterNumber = img.getAttribute('data-chapter-number');
        const isNovelCover = img.getAttribute('data-is-cover') === 'true';
        
        if (novelSlug) {
          let fallbackUrl;
          if (isNovelCover) {
            fallbackUrl = `/images/novels/${novelSlug}-cover.svg`;
          } else if (chapterNumber) {
            fallbackUrl = `/images/chapters/${novelSlug}-ch${chapterNumber}.svg`;
          }
          
          if (fallbackUrl) {
            img.src = fallbackUrl;
            console.log(`이미지 로드 실패, 플레이스홀더로 fallback: ${fallbackUrl}`);
          }
        }
      });
    });
  });
  
  // Intersection Observer for lazy animation
  if ('IntersectionObserver' in window) {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-fade-in-up');
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);
    
    document.querySelectorAll('.chapter-image-point').forEach(el => {
      observer.observe(el);
    });
  }
</script>

<style>
  .fade-in-loaded {
    animation: fadeIn 0.8s ease-out;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: scale(1.05);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
  
  /* Smooth entrance animation */
  .chapter-image-point {
    opacity: 0;
    transform: translateY(30px);
  }
  
  .chapter-image-point.animate-fade-in-up {
    animation: fadeInUp 0.8s ease-out forwards;
  }
</style>