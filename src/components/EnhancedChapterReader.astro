---
/**
 * Enhanced Chapter Reader
 * 고급 챕터 읽기 컴포넌트
 */

interface Props {
  chapterContent: string;
  chapterTitle: string;
  chapterSlug: string;
  className?: string;
}

const { 
  chapterContent, 
  chapterTitle, 
  chapterSlug, 
  className = '' 
} = Astro.props;

// 챕터 내용을 문단별로 분리
const paragraphs = chapterContent
  .split('\n')
  .filter(p => p.trim().length > 0)
  .map(p => p.trim());

// 문단 스타일 클래스 결정
function getParagraphClass(content: string): string {
  const trimmed = content.trim();
  
  // 대화 감지
  if (trimmed.startsWith('"') && trimmed.endsWith('"')) {
    return 'novel-dialogue';
  }
  
  // 강조된 대화 감지
  if (trimmed.includes('!!') || trimmed.includes('!?')) {
    return 'novel-dialogue-emphasis';
  }
  
  // 독백 감지 (이탤릭 형태 등)
  if (trimmed.startsWith("'") && trimmed.endsWith("'")) {
    return 'novel-monologue';
  }
  
  // 액션/장면 묘사 감지
  if (trimmed.startsWith('*') || trimmed.includes('[') || trimmed.length < 100) {
    return 'novel-action';
  }
  
  // 기본 서술
  return 'novel-narrative';
}
---

<div class={`enhanced-chapter-reader reading-content ${className}`}>
  <!-- Chapter Title -->
  <header class="chapter-header mb-12 text-center">
    <h1 class="text-3xl sm:text-4xl font-display font-bold text-ink-900 mb-4 leading-tight">
      {chapterTitle}
    </h1>
    <div class="w-24 h-1 bg-gradient-to-r from-rose-400 to-ink-500 mx-auto rounded-full"></div>
  </header>

  <!-- Chapter Content -->
  <article class="chapter-content space-y-6 max-w-4xl mx-auto">
    {paragraphs.map((paragraph, index) => {
      const paragraphClass = getParagraphClass(paragraph);
      const position = (index / paragraphs.length) * 100;
      
      return (
        <div 
          class={`paragraph-section ${paragraphClass}`}
          data-paragraph={index}
          data-position={position}
        >
          <p>{paragraph}</p>
        </div>
      );
    })}
  </article>

  <!-- Chapter End Decoration -->
  <div class="chapter-end mt-20 mb-16 text-center">
    <div class="novel-scene-break"></div>
    <div class="mt-8 text-stone-400 text-sm">
      - {chapterTitle} 끝 -
    </div>
  </div>

  <!-- Reading Progress Tracker -->
  <div class="reading-progress-tracker fixed bottom-4 right-4 z-40">
    <div class="bg-white/90 backdrop-blur-sm rounded-full p-3 shadow-modern border border-stone-200">
      <div class="w-12 h-12 relative">
        <svg class="w-full h-full transform -rotate-90" viewBox="0 0 36 36">
          <path
            class="text-stone-200"
            stroke="currentColor"
            stroke-width="3"
            fill="none"
            d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
          />
          <path
            class="text-rose-500 reading-progress-circle"
            stroke="currentColor"
            stroke-width="3"
            stroke-linecap="round"
            fill="none"
            stroke-dasharray="0, 100"
            d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
          />
        </svg>
        <div class="absolute inset-0 flex items-center justify-center">
          <span class="text-xs font-bold text-ink-900 reading-progress-text">0%</span>
        </div>
      </div>
    </div>
  </div>

</div>

<!-- Enhanced Reading JavaScript -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Reading progress tracker
    const progressCircle = document.querySelector('.reading-progress-circle');
    const progressText = document.querySelector('.reading-progress-text');
    const chapterContent = document.querySelector('.chapter-content');
    
    if (progressCircle && progressText && chapterContent) {
      const updateProgress = () => {
        const scrollTop = window.pageYOffset;
        const docHeight = document.documentElement.scrollHeight - window.innerHeight;
        const scrollProgress = Math.min(scrollTop / docHeight * 100, 100);
        
        progressCircle.style.strokeDasharray = `${scrollProgress}, 100`;
        progressText.textContent = `${Math.round(scrollProgress)}%`;
      };
      
      window.addEventListener('scroll', updateProgress);
      updateProgress();
    }
    
    
    // Smooth paragraph highlighting on scroll
    const paragraphs = document.querySelectorAll('.paragraph-section');
    
    if (paragraphs.length > 0) {
      const paragraphObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('current-paragraph');
          } else {
            entry.target.classList.remove('current-paragraph');
          }
        });
      }, {
        threshold: 0.3,
        rootMargin: '-20% 0px'
      });
      
      paragraphs.forEach(p => paragraphObserver.observe(p));
    }
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowDown' || e.key === 'j') {
        e.preventDefault();
        window.scrollBy({ top: 100, behavior: 'smooth' });
      } else if (e.key === 'ArrowUp' || e.key === 'k') {
        e.preventDefault();
        window.scrollBy({ top: -100, behavior: 'smooth' });
      }
    });
  });
</script>

<style>
  /* Enhanced reading styles */
  .enhanced-chapter-reader {
    line-height: 1.8;
    color: hsl(var(--ink-800));
  }
  
  .current-paragraph {
    background: linear-gradient(90deg, transparent, rgba(244, 63, 94, 0.05), transparent);
    transform: translateX(0);
    transition: all 0.3s ease;
  }
  
  .highlight-flash {
    animation: highlightFlash 2s ease-out;
  }
  
  @keyframes highlightFlash {
    0% {
      box-shadow: 0 0 0 0 rgba(244, 63, 94, 0.4);
      transform: scale(1);
    }
    50% {
      box-shadow: 0 0 0 20px rgba(244, 63, 94, 0);
      transform: scale(1.02);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(244, 63, 94, 0);
      transform: scale(1);
    }
  }
  
  /* Enhanced paragraph spacing */
  .paragraph-section {
    scroll-margin-top: 6rem;
    padding: 0.5rem 0;
    border-radius: 0.5rem;
    transition: background-color 0.3s ease;
  }
  
  /* Reading progress styles */
  .reading-progress-tracker {
    animation: fadeInUp 0.5s ease-out 1s both;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Mobile optimizations */
  @media (max-width: 768px) {
    
    .reading-progress-tracker {
      bottom: 1rem;
      right: 1rem;
    }
    
    .enhanced-chapter-reader {
      font-size: 1rem;
      line-height: 1.7;
    }
  }
</style>