---
/**
 * Enhanced Chapter Reader with Image Points
 * Gemini AI 이미지 포인트가 통합된 고급 챕터 읽기 컴포넌트
 */
import ChapterImagePoint from './ChapterImagePoint.astro';
import type { ChapterImagePoint as ImagePointType } from '../lib/types/image-types';

interface Props {
  chapterContent: string;
  chapterTitle: string;
  chapterSlug: string;
  imagePoints?: ImagePointType[];
  className?: string;
}

const { 
  chapterContent, 
  chapterTitle, 
  chapterSlug, 
  imagePoints = [], 
  className = '' 
} = Astro.props;

// 챕터 내용을 문단별로 분리
const paragraphs = chapterContent
  .split('\n')
  .filter(p => p.trim().length > 0)
  .map(p => p.trim());

// 이미지 포인트를 위치별로 정렬
const sortedImagePoints = [...imagePoints].sort((a, b) => a.position - b.position);

// 문단과 이미지 포인트를 합쳐서 렌더링 순서 결정
function createRenderSequence() {
  const sequence = [];
  let imageIndex = 0;
  
  paragraphs.forEach((paragraph, paragraphIndex) => {
    // 현재 문단의 위치 계산 (0-100%)
    const currentPosition = (paragraphIndex / paragraphs.length) * 100;
    
    // 현재 위치 이전에 삽입할 이미지 포인트들 추가
    while (
      imageIndex < sortedImagePoints.length && 
      sortedImagePoints[imageIndex].position <= currentPosition
    ) {
      sequence.push({
        type: 'image',
        data: sortedImagePoints[imageIndex],
        position: currentPosition
      });
      imageIndex++;
    }
    
    // 문단 추가
    sequence.push({
      type: 'paragraph',
      data: paragraph,
      index: paragraphIndex,
      position: currentPosition
    });
  });
  
  // 남은 이미지 포인트들 추가
  while (imageIndex < sortedImagePoints.length) {
    sequence.push({
      type: 'image',
      data: sortedImagePoints[imageIndex],
      position: 100
    });
    imageIndex++;
  }
  
  return sequence;
}

const renderSequence = createRenderSequence();

// 문단 스타일 클래스 결정
function getParagraphClass(content: string): string {
  const trimmed = content.trim();
  
  // 대화 감지
  if (trimmed.startsWith('"') && trimmed.endsWith('"')) {
    return 'novel-dialogue';
  }
  
  // 강조된 대화 감지
  if (trimmed.includes('!!') || trimmed.includes('!?')) {
    return 'novel-dialogue-emphasis';
  }
  
  // 독백 감지 (이탤릭 형태 등)
  if (trimmed.startsWith("'") && trimmed.endsWith("'")) {
    return 'novel-monologue';
  }
  
  // 액션/장면 묘사 감지
  if (trimmed.startsWith('*') || trimmed.includes('[') || trimmed.length < 100) {
    return 'novel-action';
  }
  
  // 기본 서술
  return 'novel-narrative';
}
---

<div class={`enhanced-chapter-reader reading-content ${className}`}>
  <!-- Chapter Title -->
  <header class="chapter-header mb-12 text-center">
    <h1 class="text-3xl sm:text-4xl font-display font-bold text-ink-900 mb-4 leading-tight">
      {chapterTitle}
    </h1>
    <div class="w-24 h-1 bg-gradient-to-r from-rose-400 to-ink-500 mx-auto rounded-full"></div>
  </header>

  <!-- Chapter Content with Integrated Image Points -->
  <article class="chapter-content space-y-6 max-w-4xl mx-auto">
    {renderSequence.map((item, index) => {
      if (item.type === 'image') {
        return (
          <div 
            class="chapter-image-section my-16"
            data-position={item.data.position}
            id={`image-${item.data.id}`}
          >
            <ChapterImagePoint
              imagePoint={item.data}
              className="mx-auto max-w-3xl"
            />
            
            <!-- Image Caption (Optional) -->
            {item.data.characters && item.data.characters.length > 0 && (
              <div class="mt-4 text-center">
                <p class="text-sm text-stone-500 italic">
                  {item.data.characters.join(', ')} - {item.data.setting}
                </p>
              </div>
            )}
          </div>
        );
      } else {
        // 문단 렌더링
        const paragraphClass = getParagraphClass(item.data);
        
        return (
          <div 
            class={`paragraph-section ${paragraphClass}`}
            data-paragraph={item.index}
            data-position={item.position}
          >
            <p>{item.data}</p>
          </div>
        );
      }
    })}
  </article>

  <!-- Chapter End Decoration -->
  <div class="chapter-end mt-20 mb-16 text-center">
    <div class="novel-scene-break"></div>
    <div class="mt-8 text-stone-400 text-sm">
      - {chapterTitle} 끝 -
    </div>
  </div>

  <!-- Reading Progress Tracker -->
  <div class="reading-progress-tracker fixed bottom-4 right-4 z-40">
    <div class="bg-white/90 backdrop-blur-sm rounded-full p-3 shadow-modern border border-stone-200">
      <div class="w-12 h-12 relative">
        <svg class="w-full h-full transform -rotate-90" viewBox="0 0 36 36">
          <path
            class="text-stone-200"
            stroke="currentColor"
            stroke-width="3"
            fill="none"
            d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
          />
          <path
            class="text-rose-500 reading-progress-circle"
            stroke="currentColor"
            stroke-width="3"
            stroke-linecap="round"
            fill="none"
            stroke-dasharray="0, 100"
            d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
          />
        </svg>
        <div class="absolute inset-0 flex items-center justify-center">
          <span class="text-xs font-bold text-ink-900 reading-progress-text">0%</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Image Points Navigation (Mobile) -->
  {imagePoints.length > 0 && (
    <div class="image-points-nav fixed left-4 top-1/2 transform -translate-y-1/2 z-40 hidden lg:block">
      <div class="bg-white/90 backdrop-blur-sm rounded-2xl p-3 shadow-modern border border-stone-200">
        <div class="text-xs text-stone-600 mb-2 font-medium">이미지</div>
        <div class="space-y-2">
          {imagePoints.map((point, index) => (
            <button
              class="image-nav-button w-8 h-8 rounded-full border-2 border-stone-300 hover:border-rose-400 transition-colors flex items-center justify-center text-xs font-medium"
              data-target={`image-${point.id}`}
              data-position={point.position}
              title={`${point.type} - ${point.position}%`}
            >
              {index + 1}
            </button>
          ))}
        </div>
      </div>
    </div>
  )}
</div>

<!-- Enhanced Reading JavaScript -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Reading progress tracker
    const progressCircle = document.querySelector('.reading-progress-circle');
    const progressText = document.querySelector('.reading-progress-text');
    const chapterContent = document.querySelector('.chapter-content');
    
    if (progressCircle && progressText && chapterContent) {
      const updateProgress = () => {
        const scrollTop = window.pageYOffset;
        const docHeight = document.documentElement.scrollHeight - window.innerHeight;
        const scrollProgress = Math.min(scrollTop / docHeight * 100, 100);
        
        progressCircle.style.strokeDasharray = `${scrollProgress}, 100`;
        progressText.textContent = `${Math.round(scrollProgress)}%`;
      };
      
      window.addEventListener('scroll', updateProgress);
      updateProgress();
    }
    
    // Image points navigation
    const imageNavButtons = document.querySelectorAll('.image-nav-button');
    
    imageNavButtons.forEach(button => {
      button.addEventListener('click', () => {
        const targetId = button.dataset.target;
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'center'
          });
          
          // Visual feedback
          targetElement.classList.add('highlight-flash');
          setTimeout(() => {
            targetElement.classList.remove('highlight-flash');
          }, 2000);
        }
      });
    });
    
    // Intersection Observer for image points highlighting
    if (imageNavButtons.length > 0) {
      const observerOptions = {
        threshold: 0.5,
        rootMargin: '-50px 0px'
      };
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const imageId = entry.target.id;
            const navButton = document.querySelector(`[data-target="${imageId}"]`);
            
            // Remove active class from all buttons
            imageNavButtons.forEach(btn => {
              btn.classList.remove('border-rose-500', 'bg-rose-50');
              btn.classList.add('border-stone-300');
            });
            
            // Add active class to current button
            if (navButton) {
              navButton.classList.add('border-rose-500', 'bg-rose-50');
              navButton.classList.remove('border-stone-300');
            }
          }
        });
      }, observerOptions);
      
      // Observe all image sections
      document.querySelectorAll('.chapter-image-section').forEach(section => {
        observer.observe(section);
      });
    }
    
    // Smooth paragraph highlighting on scroll
    const paragraphs = document.querySelectorAll('.paragraph-section');
    
    if (paragraphs.length > 0) {
      const paragraphObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('current-paragraph');
          } else {
            entry.target.classList.remove('current-paragraph');
          }
        });
      }, {
        threshold: 0.3,
        rootMargin: '-20% 0px'
      });
      
      paragraphs.forEach(p => paragraphObserver.observe(p));
    }
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowDown' || e.key === 'j') {
        e.preventDefault();
        window.scrollBy({ top: 100, behavior: 'smooth' });
      } else if (e.key === 'ArrowUp' || e.key === 'k') {
        e.preventDefault();
        window.scrollBy({ top: -100, behavior: 'smooth' });
      }
    });
  });
</script>

<style>
  /* Enhanced reading styles */
  .enhanced-chapter-reader {
    line-height: 1.8;
    color: hsl(var(--ink-800));
  }
  
  .current-paragraph {
    background: linear-gradient(90deg, transparent, rgba(244, 63, 94, 0.05), transparent);
    transform: translateX(0);
    transition: all 0.3s ease;
  }
  
  .highlight-flash {
    animation: highlightFlash 2s ease-out;
  }
  
  @keyframes highlightFlash {
    0% {
      box-shadow: 0 0 0 0 rgba(244, 63, 94, 0.4);
      transform: scale(1);
    }
    50% {
      box-shadow: 0 0 0 20px rgba(244, 63, 94, 0);
      transform: scale(1.02);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(244, 63, 94, 0);
      transform: scale(1);
    }
  }
  
  /* Enhanced paragraph spacing */
  .paragraph-section {
    scroll-margin-top: 6rem;
    padding: 0.5rem 0;
    border-radius: 0.5rem;
    transition: background-color 0.3s ease;
  }
  
  /* Image section spacing */
  .chapter-image-section {
    scroll-margin-top: 8rem;
  }
  
  /* Reading progress styles */
  .reading-progress-tracker {
    animation: fadeInUp 0.5s ease-out 1s both;
  }
  
  .image-points-nav {
    animation: slideInLeft 0.5s ease-out 1.5s both;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes slideInLeft {
    from {
      opacity: 0;
      transform: translateX(-20px) translateY(-50%);
    }
    to {
      opacity: 1;
      transform: translateX(0) translateY(-50%);
    }
  }
  
  /* Mobile optimizations */
  @media (max-width: 768px) {
    .image-points-nav {
      display: none;
    }
    
    .reading-progress-tracker {
      bottom: 1rem;
      right: 1rem;
    }
    
    .enhanced-chapter-reader {
      font-size: 1rem;
      line-height: 1.7;
    }
  }
</style>