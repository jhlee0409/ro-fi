---
import BaseLayout from '../layouts/BaseLayout.astro';
import AdminDashboard from '../components/AdminDashboard.astro';
import AdminLogin from '../components/AdminLogin.astro';
import { NovelDataService } from '../lib/data-services';
import '../styles/globals.css';

// 환경변수 또는 기본값 사용 (보안 강화)
const ADMIN_PASSWORD = import.meta.env.ADMIN_PASSWORD || 'zxc123';
const isDev = import.meta.env.DEV;

// 패스워드 검증 및 로그아웃 처리
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const password = formData.get('password')?.toString()?.trim();
  const logout = formData.get('logout');

  if (logout) {
    // 로그아웃 처리 - 완전한 쿠키 삭제
    Astro.cookies.delete('admin_auth', {
      path: '/',
      domain: isDev ? undefined : Astro.url.hostname
    });
    return Astro.redirect('/', 302);
  }

  if (password) {
    if (password === ADMIN_PASSWORD) {
      // 인증 성공 - 보안 강화된 쿠키 설정
      Astro.cookies.set('admin_auth', 'authenticated', {
        maxAge: 60 * 60 * 4, // 4시간
        httpOnly: true,
        secure: !isDev,
        sameSite: 'strict',
        path: '/'
      });

      return Astro.redirect('/admin', 302);
    } else {
      // 패스워드 틀림 - 브루트포스 방지를 위한 딜레이 후 홈으로 리다이렉트
      await new Promise(resolve => setTimeout(resolve, 1000));
      return Astro.redirect('/', 302);
    }
  }
}

// 인증 상태 확인
const authCookie = Astro.cookies.get('admin_auth');
const isAuthenticated = authCookie?.value === 'authenticated';

// 인증된 경우에만 데이터 로딩
let novels: any[] = [];
let tropes: any[] = [];
let platformStats = { totalNovels: 0, totalChapters: 0, activeNovels: 0 };

if (isAuthenticated) {
  try {
    [novels, tropes, platformStats] = await Promise.all([
      NovelDataService.getAllNovels(),
      NovelDataService.getAllTropes(),
      NovelDataService.getPlatformStats()
    ]);
  } catch (error) {
    console.error('Failed to load collections:', error);
  }
}

// 클라이언트 사이드 로그인 핸들러
const handleLogin = `
async function handleLogin(password) {
  const formData = new FormData();
  formData.append('password', password);

  const response = await fetch('/admin', {
    method: 'POST',
    body: formData
  });

  if (response.redirected) {
    window.location.href = response.url;
  }
}`;
---

<BaseLayout 
  title="관리자 페이지 - AI 스토리 생성"
  description="RO-FAN AI 스토리 생성 관리자 대시보드"
>
  {!isAuthenticated ? (
    <AdminLogin 
      onLogin={handleLogin}
    />
  ) : (
    <AdminDashboard 
      novels={novels}
      tropes={tropes}
      platformStats={platformStats}
    />
  )}
</BaseLayout>
  
  <script>
import { coerce, record } from "astro:schema";


        const colors = {
        success: 'bg-green-500',
        error: 'bg-red-500',
        warning: 'bg-yellow-500',
        info: 'bg-blue-500'
      } as const

      type Color = keyof typeof colors;

    // AI 도구 폼들
    const plotForm = document.getElementById('plotForm');
    const chapterForm = document.getElementById('chapterForm');
    const improveForm = document.getElementById('improveForm');

    // 폼 제출 핸들러들
    plotForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      if(!e.target) return;
      const target = e.target as HTMLFormElement;
      const formData = new FormData(target);
      const title = formData.get('title');
      const tropes = formData.getAll('tropes');

      if (tropes.length === 0) {
        showNotification('최소 1개의 트렌드를 선택해주세요.', 'warning');
        return;
      }

      await generateContent('generate-plot', { title, tropes }, 'plotResult', target);
    });

    chapterForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      if(!e.target) return;
      const target = e.target as HTMLFormElement;
      const formData = new FormData(target);
      const chapterNumber = formData.get('chapterNumber')

      const data = {
        title: formData.get('novel'),
        chapterNumber,
        previousContext: formData.get('previousContext'),
        tropes: []
      };

      await generateContent('generate-chapter', data, 'chapterResult', target);
    });

    improveForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      if(!e.target) return;
      const target = e.target as HTMLFormElement;
      const formData = new FormData(target);
      const originalChapter = formData.get('originalChapter');
      const improvementCriteria = formData.getAll('criteria');

      if (improvementCriteria.length === 0) {
        showNotification('최소 1개의 개선 기준을 선택해주세요.', 'warning');
        return;
      }

      await generateContent('improve-chapter', { originalChapter, improvementCriteria }, 'improveResult', target);
    });

    // AI 콘텐츠 생성 함수
    async function generateContent(action: string, data: any, resultElementId: string, formElement: HTMLFormElement) {
      const resultElement = document.getElementById(resultElementId);
      const submitButton = formElement.querySelector('button[type="submit"]') as HTMLButtonElement

      if (!resultElement || !submitButton) return;

      // 로딩 상태 시작
      const originalText = submitButton.innerHTML;
      submitButton.innerHTML = '<span class="animate-spin">⏳</span> AI 창작 중...';
      submitButton.disabled = true;

      resultElement.innerHTML = `
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 text-center">
          <div class="animate-spin text-2xl mb-2">🤖</div>
          <div class="text-sm text-blue-700">AI가 열심히 창작 중입니다...</div>
        </div>
      `;

      try {
        const response = await fetch('/api/generate-story', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action, ...data })
        });

        const result = await response.json();

        if (result.success) {
          resultElement.innerHTML = `
            <div class="bg-green-50 border border-green-200 rounded-lg p-4">
              <div class="flex justify-between items-center mb-3">
                <h4 class="text-green-800 font-medium">✅ 생성 완료!</h4>
                <button onclick="copyToClipboard(this)" class="text-sm bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700">
                  📋 복사하기
                </button>
              </div>
              <div class="bg-white rounded border p-3 max-h-64 overflow-y-auto">
                <pre class="text-sm whitespace-pre-wrap">${typeof result.data === 'object' ? JSON.stringify(result.data, null, 2) : result.data}</pre>
              </div>
            </div>
          `;
          showNotification('콘텐츠가 성공적으로 생성되었습니다!', 'success');
        } else {
          resultElement.innerHTML = `
            <div class="bg-red-50 border border-red-200 rounded-lg p-4">
              <h4 class="text-red-800 font-medium mb-2">❌ 생성 실패</h4>
              <p class="text-red-700 text-sm">${result.error}</p>
              ${result.details ? `<p class="text-red-600 text-xs mt-1">${result.details}</p>` : ''}
            </div>
          `;
          showNotification('생성에 실패했습니다. 다시 시도해주세요.', 'error');
        }
      } catch (error) {
        resultElement.innerHTML = `
          <div class="bg-red-50 border border-red-200 rounded-lg p-4">
            <h4 class="text-red-800 font-medium mb-2">❌ 네트워크 오류</h4>
            <p class="text-red-700 text-sm">서버와의 통신에 실패했습니다.</p>
          </div>
        `;
        showNotification('네트워크 오류가 발생했습니다.', 'error');
      } finally {
        // 로딩 상태 종료
        submitButton.innerHTML = originalText;
        submitButton.disabled = false;
      }
    }





    // 알림 시스템
    function showNotification(message: string, type = 'info' as Color) {

      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 ${colors[type]} text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full`;
      notification.innerHTML = `
        <div class="flex items-center justify-between">
          <span>${message}</span>
          <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-white hover:text-gray-200">×</button>
        </div>
      `;

      document.body.appendChild(notification);

      // 애니메이션
      setTimeout(() => {
        notification.classList.remove('translate-x-full');
      }, 100);

      // 자동 제거
      setTimeout(() => {
        notification.classList.add('translate-x-full');
        setTimeout(() => notification.remove(), 300);
      }, 5000);
    }

    // 클립보드 복사
    function copyToClipboard(button : HTMLButtonElement) {
      if(!button) return;
      const content = button.closest('.bg-green-50')?.querySelector('pre')?.textContent;
      if(!content)return;
      if (navigator.clipboard) {
        navigator.clipboard.writeText(content).then(() => {
          button.textContent = '✅ 복사됨!';
          setTimeout(() => {
            button.textContent = '📋 복사하기';
          }, 2000);
        });
      }
    }
  </script>
</Layout>